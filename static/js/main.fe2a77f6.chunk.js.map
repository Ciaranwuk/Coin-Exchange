{"version":3,"sources":["Components/Coin/Coin.jsx","Components/CoinList/CoinList.jsx","Components/AccountBalance/AccountBalance.jsx","Components/logo.svg","Components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","Coin","props","balanceToggle","showBalance","balance","name","ticker","price","action","method","onClick","event","preventDefault","handleRefresh","id","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","amount","handleToggleBalance","Wrapper","Title","h1","Img","img","Header","src","logo","alt","Component","Div","div","tickerUrl","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","promises","Promise","all","coinPriceData","symbol","parseFloat","Number","quotes","toFixed","useEffect","length","valueChangeId","refreshedData","newCoinData","values","newValues","console","log","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mXAIA,IAAMA,EAAKC,IAAOC,GAAV,KAKO,SAASC,EAAKC,GAE1B,IAMSC,EAAgBD,EAAME,YAAc,eAACN,EAAD,eAAMI,EAAMG,QAAZ,OAA6B,KACrE,OACI,+BACI,cAACP,EAAD,UAAKI,EAAMI,OACX,cAACR,EAAD,UAAKI,EAAMK,SACX,eAACT,EAAD,eAAMI,EAAMM,SACXL,EACD,cAACL,EAAD,UACI,sBAAMW,OAAO,IAAIC,OAAO,OAAxB,SACI,wBAAQC,QAfT,SAACC,GAEhBA,EAAMC,iBACNX,EAAMY,cAAcZ,EAAMa,KAYV,4B,gJCtBxB,IAAMC,EAAQjB,IAAOkB,MAAV,KAMI,SAASC,EAAShB,GAEzB,IAAIC,EAAgBD,EAAME,YAAc,2CAAqB,KAC7D,OACI,eAACY,EAAD,WACA,gCACI,+BACI,sCACA,wCACA,uCACCb,EACD,6CAGR,gCAEID,EAAMiB,SAASC,KAAM,gBAAEC,EAAF,EAAEA,IAAKf,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,MAAOH,EAA5B,EAA4BA,QAA5B,OACjB,cAACJ,EAAD,CAEIc,GAAMM,EACNP,cAAeZ,EAAMY,cACrBV,YAAeF,EAAME,YACrBE,KAAMA,EACNC,OAAQA,EACRF,QAAUA,EACVG,MAAOA,GAPDa,W,4KCxB9B,IAAMC,EAAUvB,IAAOwB,QAAV,KAOE,SAASC,EAAetB,GAE/B,IAAMuB,EAAavB,EAAME,YAAc,eAAiB,eACpDD,EAAgBD,EAAME,YAAc,mDAAcF,EAAMwB,OAApB,OAAkC,KAE1E,OACI,eAACJ,EAAD,WACEnB,EACD,wBAAQQ,QAAST,EAAMyB,oBAAvB,SAA6CF,O,oCCnB3C,MAA0B,iC,saCIzC,IAAMG,EAAU7B,IAAOwB,QAAV,KAUPM,EAAQ9B,IAAO+B,GAAV,KAILC,EAAMhC,IAAOiC,IAAV,KAKYC,E,uKAEb,OACA,eAACL,EAAD,WACE,cAACG,EAAD,CAAKG,IAAKC,EAAMC,IAAI,eACpB,cAACP,EAAD,mC,GAL0BQ,a,iKChBpC,IAAMC,EAAMvC,IAAOwC,IAAV,KAOHC,EAAY,0CAiEHC,MA/Df,SAAavC,GAAQ,IAAD,EAEawC,mBAAS,KAFtB,mBAEXrC,EAFW,aAGoBqC,oBAAS,IAH7B,mBAGXtC,EAHW,KAGEuC,EAHF,OAIcD,mBAAS,IAJvB,mBAIXvB,EAJW,KAIDyB,EAJC,KAMZC,EAAiB,uCAAG,oCAAAC,EAAA,sEACHC,IAAMC,IAAI,wCADP,cACpBC,EADoB,OAEpBC,EAAUD,EAASE,KAAKC,MAAM,EAXnB,IAWkChC,KAAI,SAAAiC,GAAI,OAAIA,EAAKtC,MAC5DuC,EAAWJ,EAAQ9B,KAAI,SAAAL,GAAE,OAAIgC,IAAMC,IAAIR,EAAYzB,MAHjC,SAIDwC,QAAQC,IAAIF,GAJX,OAIlBnC,EAJkB,OAKlBsC,EAAgBtC,EAASC,KAAI,SAAS6B,GAC1C,IAAMI,EAAOJ,EAASE,KACtB,MAAM,CACJ9B,IAAKgC,EAAKtC,GACVT,KAAM+C,EAAK/C,KACXC,OAAQ8C,EAAKK,OACbrD,QAAS,EACTG,MAAOmD,WAAWC,OAAOP,EAAKQ,OAAL,IAAmBrD,OAAOsD,QAAQ,QAG/DlB,EAAYa,GAfY,4CAAH,qDAkBvBM,qBAAU,WACgB,IAApB5C,EAAS6C,QACXnB,OAIJ,IAAM/B,EAAa,uCAAG,WAAOmD,GAAP,mBAAAnB,EAAA,sEACCC,IAAMC,IAAIR,EAAYyB,GADvB,OAChBhB,EADgB,OAGdiB,EAAgBjB,EAASE,KACzBgB,EAAchD,EAASC,KAAK,SAAUgD,GAC1C,IAAIC,EAAS,eAAOD,GAKpB,OAJIH,IAAkBG,EAAO/C,MAC3BgD,EAAU7D,MAAQmD,WAAWC,OAAOM,EAAcL,OAAd,IAA4BrD,OAAOsD,QAAQ,IAC/EQ,QAAQC,IAAK,cAERF,KAGTzB,EAAYuB,GAbQ,2CAAH,sDAoBjB,OACE,eAAC7B,EAAD,WACE,cAAC,EAAD,IACA,cAACd,EAAD,CAAgBE,OAASrB,EAASD,YAAaA,EAC7CuB,oBARoB,WAC1BgB,GAAe,SAAA6B,GAAQ,OAAKA,QAQxB,cAACtD,EAAD,CAAUC,SAAUA,EAAUL,cAAeA,EAC3CV,YAAeA,QC5DVqE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe2a77f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from 'styled-components';\r\n\r\nconst Td = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\n\r\nexport default function Coin(props) {\r\n\r\n   const handleClick = (event) => {\r\n        //prevent default acton of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.id);\r\n   }\r\n   \r\n        let balanceToggle = props.showBalance ? <Td> {props.balance} </Td> : null;\r\n        return (\r\n            <tr>\r\n                <Td>{props.name}</Td>\r\n                <Td>{props.ticker}</Td>\r\n                <Td>${props.price}</Td>\r\n                {balanceToggle}\r\n                <Td>\r\n                    <form action=\"#\" method=\"POST\">\r\n                        <button onClick={handleClick}>Refresh</button>\r\n                    </form>\r\n                </Td>\r\n            </tr>\r\n        )\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\nmargin: 50px auto 50px auto;\r\ndisplay: inline-block;\r\nfont-size:1.4rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n\r\n        let balanceToggle = props.showBalance ? <th> Balance </th> : null;\r\n        return (\r\n            <Table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Ticker</th>\r\n                    <th>Price</th>\r\n                    {balanceToggle}\r\n                    <th>Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                props.coinData.map ( ({key, name, ticker, price, balance}) => \r\n                    <Coin \r\n                        key= {key} \r\n                        id = {key}\r\n                        handleRefresh={props.handleRefresh}    \r\n                        showBalance = {props.showBalance}\r\n                        name={name} \r\n                        ticker={ticker}\r\n                        balance= {balance}   \r\n                        price={price} />\r\n                )\r\n            }\r\n            </tbody>\r\n            </Table>\r\n        )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: right;\r\n    padding: 1.5rem 5rem 1.5rem 0;\r\n    color: white;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n\r\n        const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n        let balanceToggle = props.showBalance ? <> Balance: ${props.amount} </> : null;\r\n\r\n        return (\r\n            <Section>\r\n             {balanceToggle}\r\n             <button onClick={props.handleToggleBalance}>{buttonText}</button>\r\n            </Section>\r\n        );\r\n    \r\n}\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react'\r\nimport logo from '../logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.section`\r\nbackground-color: #282c34;\r\nmin-height: 20vh;\r\ndisplay: flex;\r\nflex-direction: row;\r\nalign-items: center;\r\njustify-content: flex-start;\r\ncolor: white;\r\n`;\r\n\r\nconst Title = styled.h1`\r\nfont-size: 4rem;\r\n`;\r\n\r\nconst Img = styled.img`\r\nheight: 20rem;\r\npointer-events: none;\r\n`;\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n        <Wrapper>\r\n          <Img src={logo} alt=\"React logo\" />\r\n          <Title>\r\n            Coin Exchange\r\n          </Title>\r\n        </Wrapper> \r\n        )\r\n    }\r\n}\r\n","import React, {useState, useEffect} from \"react\";\nimport CoinList from './Components/CoinList/CoinList';\nimport AccountBalance from './Components/AccountBalance/AccountBalance';\nimport Header from './Components/Header/Header';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\ntext-align: center;\nbackground-color: rgb(20, 56, 97);\ncolor: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n\nfunction App(props) {\n\n  const [balance, setBalance] =  useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    let response = await axios.get('https://api.coinpaprika.com/v1/coins')\n    let coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises)\n    const coinPriceData = coinData.map(function(response){\n      const coin = response.data;\n      return{\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: parseFloat(Number(coin.quotes['USD'].price).toFixed(2)),\n      };\n    });\n    setCoinData(coinPriceData);\n  }\n\n  useEffect(function() {\n    if (coinData.length === 0) {\n      componentDidMount();\n    }\n  });\n\n  const handleRefresh = async (valueChangeId) => {\n    let response = await axios.get(tickerUrl + valueChangeId);\n    debugger;\n    const refreshedData = response.data;\n    const newCoinData = coinData.map( function( values ) {\n      let newValues = {...values};\n      if (valueChangeId === values.key) {\n        newValues.price = parseFloat(Number(refreshedData.quotes['USD'].price).toFixed(2));\n        console.log (\"refreshed\");\n      }\n      return newValues;\n    });\n\n    setCoinData(newCoinData);\n  }\n\n  const handleToggleBalance = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n    return (\n      <Div>\n        <Header/>\n        <AccountBalance amount= {balance} showBalance={showBalance}\n          handleToggleBalance = {handleToggleBalance} />\n        <CoinList coinData={coinData} handleRefresh={handleRefresh}\n          showBalance = {showBalance} />\n      </Div>\n    );\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}